// src/dev/upsert_by_record_ids.ts
import 'dotenv/config';
import Airtable from 'airtable';
import { fromAirtableToShoeInputs } from '../pipeline/fromAirtableToShoeInputs';
import { upsertResults } from '../db/upsertResults';

const base = new Airtable({ apiKey: process.env.AIRTABLE_API_KEY! })
  .base(process.env.AIRTABLE_BASE_ID!);
const tableName = process.env.AIRTABLE_TABLE_NAME!;

function uniqBy<T>(arr: T[], key: (x: T) => string) {
  const seen = new Set<string>();
  const out: T[] = [];
  for (const x of arr) {
    const k = key(x);
    if (!seen.has(k)) { seen.add(k); out.push(x); }
  }
  return out;
}

async function run(ids: string[]) {
  if (!ids.length) {
    console.error('Usage: npx tsx src/dev/upsert_by_record_ids.ts <airtable_rec_id> [...]');
    process.exit(1);
  }

  // —Ç—è–Ω–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ Airtable –ø–æ –∏—Ö record_id
  const recs = await Promise.all(ids.map(async (id) => {
    try { return await base(tableName).find(id); }
    catch (e: any) {
      console.error(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Airtable: ${id} (${e?.message || e})`);
      return null as any;
    }
  }));
  const found = recs.filter(Boolean);
  if (found.length === 0) {
    console.error('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–ø—Å–µ—Ä—Ç–∞.');
    process.exit(1);
  }

  // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ShoeInput
  const inputs = await fromAirtableToShoeInputs(found);

  if (!inputs.length) {
    console.error('‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ—Ä–Ω—É–ª 0 –º–æ–¥–µ–ª–µ–π.');
    process.exit(1);
  }

  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ (record_id, model_key)
  const dedup = uniqBy(inputs, (x: any) => `${x.record_id}::${x.model_key}`);

  // –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  for (const r of dedup as any[]) {
    if (!r.record_id) throw new Error('record_id is required');
    if (!r.model_key) throw new Error('model_key is required');
  }

  console.log('üì¶ –ì–æ—Ç–æ–≤–∏–º UPSERT:', dedup.map((r: any) => ({
    record_id: r.record_id, brand: r.brand_name, model: r.model, model_key: r.model_key, price: r.price
  })));

  const res = await upsertResults(dedup as any[]);
  console.log('‚úÖ upserted:', res);
}

// CLI: ids –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const ids = process.argv.slice(2).map(s => s.trim()).filter(Boolean);
run(ids).catch(e => { console.error('‚ùå –û—à–∏–±–∫–∞:', e); process.exit(1); });
