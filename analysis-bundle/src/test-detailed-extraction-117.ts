// src/test-detailed-extraction-117.ts - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ 117
import 'dotenv/config';
import { fetchAirtableRows } from './airtable/fetch';
import OpenAI from 'openai';
import loadConfig from './config/index';

async function detailedAnalysis117() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ ID 117...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    const records = await fetchAirtableRows({ max: 500 });
    const targetRecord = records.find(r => String(r.fields.ID || r.id) === '117');

    if (!targetRecord) {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const content = String(targetRecord.fields.Content || '');
    const title = String(targetRecord.fields.Title || targetRecord.fields['New Title'] || '');

    console.log(`üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${title}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    const enhancedPrompt = `You are an expert sneaker analyst. Extract ALL SNEAKERS/RUNNING SHOES from this comprehensive review article with COMPLETE information.

CRITICAL INSTRUCTIONS:
1. Extract EVERY sneaker model mentioned in the article - don't skip any
2. For each model, extract ALL available technical specifications
3. Look for information throughout the ENTIRE article, not just the beginning
4. Include ALL brands: Nike, Adidas, Brooks, Asics, Hoka, New Balance, Puma, Saucony, etc.
5. Extract COMPLETE data sets - weight, drop, height, price, etc.

REQUIRED OUTPUT: Complete JSON array with ALL models found.

For each sneaker, extract these fields if mentioned:
- brand (lowercase)
- model (exact name)
- primary_use (daily_trainer/racing/trail/etc)
- cushioning_type (soft/firm/responsive/etc)
- heel_height (in mm)
- forefoot_height (in mm)
- weight (in grams - convert oz to grams: oz √ó 28.35)
- foot_width (narrow/medium/wide)
- drop (in mm)
- surface_type (road/trail/mixed)
- upper_breathability (breathable/mesh/knit/etc)
- carbon_plate (yes/no/partial)
- waterproof (goretex/waterproof/water_resistant/none)
- price (in USD)
- additional_features (key technologies/features)

IMPORTANT:
- Scan the ENTIRE article, not just excerpts
- Extract EVERY model with ANY available data
- Don't skip models with partial information
- Look for comparison tables, specification lists, detailed reviews

Title: ${title}

Article Content: ${content}`;

    const config = loadConfig();
    const client = new OpenAI({ apiKey: config.openai.apiKey });

    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...');

    const response = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: enhancedPrompt }],
      temperature: 0.1,
      max_tokens: 4000,
    });

    const resultText = response.choices[0]?.message?.content?.trim();
    console.log('\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI:');
    console.log(resultText);

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let extractedData = [];
    try {
      const cleanText = resultText
        ?.replace(/```json\s*/gi, '')
        .replace(/```\s*$/g, '')
        .trim();

      if (cleanText?.startsWith('[') && cleanText.endsWith(']')) {
        extractedData = JSON.parse(cleanText);
      }
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
    }

    console.log(`\nüìä –ò—Ç–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${extractedData.length}`);

    if (extractedData.length > 0) {
      console.log('\nüëü –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏:');
      extractedData.forEach((sneaker: any, index: number) => {
        console.log(`\n${index + 1}. ${sneaker.brand?.toUpperCase()} ${sneaker.model}`);

        const specs = [];
        if (sneaker.weight) specs.push(`–í–µ—Å: ${sneaker.weight}–≥`);
        if (sneaker.drop) specs.push(`–î—Ä–æ–ø: ${sneaker.drop}–º–º`);
        if (sneaker.heel_height) specs.push(`–ü—è—Ç–∫–∞: ${sneaker.heel_height}–º–º`);
        if (sneaker.forefoot_height) specs.push(`–ù–æ—Å–æ–∫: ${sneaker.forefoot_height}–º–º`);
        if (sneaker.price) specs.push(`–¶–µ–Ω–∞: $${sneaker.price}`);
        if (sneaker.primary_use) specs.push(`–¢–∏–ø: ${sneaker.primary_use}`);
        if (sneaker.cushioning_type) specs.push(`–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: ${sneaker.cushioning_type}`);
        if (sneaker.surface_type) specs.push(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${sneaker.surface_type}`);

        if (specs.length > 0) {
          console.log(`   ${specs.join(' | ')}`);
        }

        if (sneaker.additional_features) {
          console.log(`   üí° ${sneaker.additional_features}`);
        }
      });

      // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö:');
      const modelsWithFullData = extractedData.filter((s: any) =>
        s.weight && s.drop && s.price && s.primary_use
      );
      console.log(`‚úÖ –ú–æ–¥–µ–ª–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${modelsWithFullData.length}`);

      const modelsWithPartialData = extractedData.filter((s: any) =>
        !s.weight || !s.drop || !s.price || !s.primary_use
      );
      console.log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${modelsWithPartialData.length}`);
    }

    console.log('\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:');
    if (response.usage) {
      const inputCost = (response.usage.prompt_tokens || 0) * 0.00015 / 1000;
      const outputCost = (response.usage.completion_tokens || 0) * 0.0006 / 1000;
      console.log(`–í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${response.usage.prompt_tokens}`);
      console.log(`–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${response.usage.completion_tokens}`);
      console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${(inputCost + outputCost).toFixed(6)}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

detailedAnalysis117().catch(console.error);