// src/test-smart-extraction-117.ts - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ 117
import 'dotenv/config';
import { fetchAirtableRows } from './airtable/fetch';
import OpenAI from 'openai';
import loadConfig from './config/index';

async function smartAnalysis117() {
  try {
    console.log('üîç –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ ID 117...\n');

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    const records = await fetchAirtableRows({ max: 500 });
    const targetRecord = records.find(r => String(r.fields.ID || r.id) === '117');

    if (!targetRecord) {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const content = String(targetRecord.fields.Content || '');
    const title = String(targetRecord.fields.Title || targetRecord.fields['New Title'] || '');

    console.log(`üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${title}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    console.log('\nüîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:');

    // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
    const brands = ['brooks', 'nike', 'adidas', 'asics', 'hoka', 'new balance', 'puma', 'saucony', 'mizuno', 'on', 'altra'];
    const foundBrands = brands.filter(brand =>
      content.toLowerCase().includes(brand)
    );
    console.log(`üëü –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: ${foundBrands.join(', ')}`);

    // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const weightMatches = content.match(/\b\d+(\.\d+)?\s*(g|grams?|oz|ounces?)\b/gi) || [];
    const dropMatches = content.match(/\b\d+(\.\d+)?\s*mm\s*(drop|–¥—Ä–æ–ø)\b/gi) || [];
    const priceMatches = content.match(/\$\d+/g) || [];

    console.log(`‚öñÔ∏è  –í–µ—Å–∞ –Ω–∞–π–¥–µ–Ω–æ: ${weightMatches.length} (${weightMatches.slice(0, 3).join(', ')}...)`);
    console.log(`üìè –î—Ä–æ–ø–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${dropMatches.length} (${dropMatches.slice(0, 3).join(', ')}...)`);
    console.log(`üí∞ –¶–µ–Ω –Ω–∞–π–¥–µ–Ω–æ: ${priceMatches.length} (${priceMatches.slice(0, 5).join(', ')}...)`);

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —á–∞—Å—Ç–∏
    const maxChunkSize = 8000; // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è GPT-4o-mini
    const chunks = [];

    for (let i = 0; i < content.length; i += maxChunkSize) {
      chunks.push(content.slice(i, i + maxChunkSize));
    }

    console.log(`\nüìÑ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

    const config = loadConfig();
    const client = new OpenAI({ apiKey: config.openai.apiKey });

    let allExtracted: any[] = [];
    let totalCost = 0;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    for (let i = 0; i < chunks.length; i++) {
      console.log(`\nü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—å ${i + 1}/${chunks.length}...`);

      const chunkPrompt = `Extract ALL sneakers/running shoes from this part of a comprehensive shoe review article.

EXTRACT EVERY MODEL with ANY available specifications. Look for:
- Brand and model names
- Weight (in grams or oz)
- Drop (in mm)
- Heel/forefoot height (in mm)
- Price (in USD)
- Cushioning type
- Surface type
- Technologies/features

Return ONLY valid JSON array:

Article part: ${chunks[i]}`;

      const response = await client.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: chunkPrompt }],
        temperature: 0.1,
        max_tokens: 2000,
      });

      // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      if (response.usage) {
        const inputCost = (response.usage.prompt_tokens || 0) * 0.00015 / 1000;
        const outputCost = (response.usage.completion_tokens || 0) * 0.0006 / 1000;
        totalCost += inputCost + outputCost;
      }

      const resultText = response.choices[0]?.message?.content?.trim();

      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      try {
        const cleanText = resultText
          ?.replace(/```json\s*/gi, '')
          .replace(/```\s*$/g, '')
          .trim();

        if (cleanText?.startsWith('[') && cleanText.endsWith(']')) {
          const chunkData = JSON.parse(cleanText);
          allExtracted.push(...chunkData);
          console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${chunkData.length} –º–æ–¥–µ–ª–µ–π –∏–∑ —á–∞—Å—Ç–∏ ${i + 1}`);
        } else {
          console.log(`‚ö†Ô∏è  –ß–∞—Å—Ç—å ${i + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`);
        }
      } catch (e) {
        console.log(`‚ùå –ß–∞—Å—Ç—å ${i + 1}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
      }
    }

    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ brand + model
    const uniqueModels = [];
    const seen = new Set();

    for (const model of allExtracted) {
      const key = `${model.brand || 'unknown'}::${model.model || 'unknown'}`.toLowerCase();
      if (!seen.has(key)) {
        seen.add(key);
        uniqueModels.push(model);
      }
    }

    console.log(`\nüìä –ò—Ç–æ–≥–æ –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${uniqueModels.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π`);
    console.log(`üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${totalCost.toFixed(6)}`);

    if (uniqueModels.length > 0) {
      console.log('\nüëü –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏:');

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ—Ç–µ –¥–∞–Ω–Ω—ã—Ö
      const sortedModels = uniqueModels.sort((a, b) => {
        const scoreA = [a.weight, a.drop, a.price, a.primary_use].filter(x => x).length;
        const scoreB = [b.weight, b.drop, b.price, b.primary_use].filter(x => x).length;
        return scoreB - scoreA; // –°–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–µ
      });

      sortedModels.forEach((sneaker: any, index: number) => {
        const completeness = [sneaker.weight, sneaker.drop, sneaker.price, sneaker.primary_use].filter(x => x).length;
        const status = completeness >= 3 ? '‚úÖ' : completeness >= 2 ? '‚ö†Ô∏è' : '‚ùå';

        console.log(`\n${index + 1}. ${status} ${sneaker.brand?.toUpperCase() || 'UNKNOWN'} ${sneaker.model || 'Unknown Model'}`);

        const specs = [];
        if (sneaker.weight) specs.push(`–í–µ—Å: ${sneaker.weight}–≥`);
        if (sneaker.drop) specs.push(`–î—Ä–æ–ø: ${sneaker.drop}–º–º`);
        if (sneaker.heel_height) specs.push(`–ü—è—Ç–∫–∞: ${sneaker.heel_height}–º–º`);
        if (sneaker.price) specs.push(`–¶–µ–Ω–∞: $${sneaker.price}`);
        if (sneaker.primary_use) specs.push(`–¢–∏–ø: ${sneaker.primary_use}`);

        if (specs.length > 0) {
          console.log(`   ${specs.join(' | ')}`);
        }

        if (sneaker.additional_features) {
          console.log(`   üí° ${sneaker.additional_features}`);
        }
      });

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
      const fullData = sortedModels.filter(s => s.weight && s.drop && s.price);
      const partialData = sortedModels.filter(s => !s.weight || !s.drop || !s.price);

      console.log(`\nüìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:`);
      console.log(`‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–µ—Å+–¥—Ä–æ–ø+—Ü–µ–Ω–∞): ${fullData.length}`);
      console.log(`‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${partialData.length}`);
      console.log(`üìä –°—Ä–µ–¥–Ω—è—è –ø–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${((fullData.length / uniqueModels.length) * 100).toFixed(1)}%`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

smartAnalysis117().catch(console.error);