// src/test-record-117.ts - –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ —Å ID 117
import 'dotenv/config';
import { fetchAirtableRows } from './airtable/fetch';
import { SneakerEnricher } from './llm/enrich';
import loadConfig from './config/index';

async function analyzeRecord117() {
  try {
    console.log('üîç –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å ID 117...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Airtable
    const records = await fetchAirtableRows({ max: 500 });
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ Airtable`);

    // –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å ID 117
    const targetRecord = records.find(r => {
      const id = r.fields.ID || r.fields.id || r.id;
      return String(id) === '117';
    });

    if (!targetRecord) {
      console.log('‚ùå –ó–∞–ø–∏—Å—å —Å ID 117 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

      // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
      console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID (–ø–µ—Ä–≤—ã–µ 10):');
      records.slice(0, 10).forEach(r => {
        const id = r.fields.ID || r.fields.id || r.id;
        const title = r.fields.Title || r.fields['New Title'] || 'No title';
        console.log(`  ID: ${id}, Title: ${String(title).slice(0, 50)}...`);
      });
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID 117!\n');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const fields = targetRecord.fields;
    const title = fields.Title || fields['New Title'] || 'No title';
    const content = fields.Content || 'No content';
    const url = fields.URL || fields.Link || fields['Article link'] || 'No URL';

    console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:');
    console.log(`Title: ${title}`);
    console.log(`URL: ${url}`);
    console.log(`Content length: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`Content preview: ${String(content).slice(0, 200)}...\n`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º SneakerEnricher –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–æ—Å—Å–æ–≤–æ–∫
    const config = loadConfig();
    if (!config.openai.apiKey) {
      console.log('‚ùå –ù–µ—Ç OPENAI_API_KEY, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑');
      return;
    }

    const enricher = new SneakerEnricher(config.openai);

    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–æ—Å—Å–æ–≤–æ–∫...');
    const extractedSneakers = await enricher.enrichArticle(
      117,
      String(title),
      String(content),
      String(url)
    );

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:');
    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫—Ä–æ—Å—Å–æ–≤–æ–∫: ${extractedSneakers.length}`);

    if (extractedSneakers.length > 0) {
      console.log('\nüëü –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏:');
      extractedSneakers.forEach((sneaker, index) => {
        console.log(`\n${index + 1}. ${sneaker.brand_name} ${sneaker.model}`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${sneaker.primary_use || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   –í–µ—Å: ${sneaker.weight ? sneaker.weight + '–≥' : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –¶–µ–Ω–∞: ${sneaker.price ? '$' + sneaker.price : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   –î—Ä–æ–ø: ${sneaker.drop ? sneaker.drop + '–º–º' : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        if (sneaker.additional_features) {
          console.log(`   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${sneaker.additional_features}`);
        }
      });
    } else {
      console.log('‚ùå –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI:');
    console.log(enricher.getStats());

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø–∏—Å–∏:', error);
  }
}

analyzeRecord117().catch(console.error);